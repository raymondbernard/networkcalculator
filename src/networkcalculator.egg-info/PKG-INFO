Metadata-Version: 2.1
Name: networkcalculator
Version: 1.0.6
Summary: A network calculator package
Home-page: https://gitlab.com/raymodbernard/networkcalculator
Author: Ray Bernard
Author-email: ray.bernard@outlook.com
Project-URL: Bug Tracker, https://gitlab.com/raymodbernard/networkcalculator/issues
Project-URL: repository, https://gitlab.com/raymodbernard/networkcalculator
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE.txt

# Network Calculator

### The What and Why of Network Calculations

In networking, IP addresses and subnet masks are crucial for defining the structure and reach of the network. However, doing these calculations manually can be cumbersome and error-prone. This is where Python, with its vast library support and simplicity, can be a lifesaver.

In this article, we'll delve into a Python class called I have created called the 'NetworkCalculator'. It is designed to automate common network calculation tasks. To fully understand this, it is recommended you have some basic knowledge of IP addresses, subnet masks, network IDs, broadcast IDs, and CIDR notation. There are a tone of online resources to help your understanding. 

The NetworkCalculator class is initialized with an IP address in CIDR notation as input. CIDR (Classless Inter-Domain Routing) notation represents an IP address and its associated routing prefix. 

For instance, '192.168.1.10/24' is an example of an IP address in CIDR notation.
The __init__ method splits the IP address and the CIDR subnet prefix, and an IPv4Network object is created with these. The strict=False parameter allows the IP address part to be any IP address inside the network.

### Network Calculator Methods you can use in your code 
```

After creating the NetworkCalculator object, Here are several methods can we create and us to perform network calculations:

get_subnet_mask(): Returns the subnet mask of the network. The subnet mask defines the size of the network.

get_network_id(): Returns the Network ID. This is the first IP address in the network and it identifies the network itself.

get_next_network(): Returns the Network ID of the next network. It's calculated by adding 2^(32 - CIDR) to the network address.

get_broadcast_id(): Returns the last IP address in the network, which is used for broadcasting messages to all devices in the network.

get_first_ip(): Returns the first usable IP address in the network. It's simply the Network ID plus one.

get_last_ip(): Returns the last usable IP address in the network, which is one less than the broadcast ID.

get_total_ips(): Returns the total number of usable IP addresses in the network.
```

## Installation
```python

pip install networkcalculator

```


### how to use the code 
```python 

from cidr.network_calculator  import Network_Calculator

# Use it like this:
ip_list = ['198.51.100.0/22 ', '192.168.1.10/26', '172.16.0.5/16']

# Call the function with the list of CIDR IP addresses
Network_Calculator.print_network_info(ip_list)

# Call the function with the list of CIDR IP addresses and the filename of your output file
Network_Calculator.write_to_csv(ip_list, 'network.csv')

```

### Output 

| CIDR            | Subnet Mask     | Network ID   | Next Network | Broadcast ID   | First IP     | Last IP        | Total IPs |
| --------------- | --------------- | ------------ | ------------ | -------------- | ------------ | -------------- | --------- |
| 198.51.100.0/22 | 255.255.252.0   | 198.51.100.0 | 198.51.104.0 | 198.51.103.255 | 198.51.100.1 | 198.51.103.254 | 1022      |
| 192.168.1.10/26 | 255.255.255.192 | 192.168.1.0  | 192.168.1.64 | 192.168.1.63   | 192.168.1.1  | 192.168.1.62   | 62        |
| 172.16.0.5/16   | 255.255.0.0     | 172.16.0.0   | 172.17.0.0   | 172.16.255.255 | 172.16.0.1   | 172.16.255.254 | 65534     |
|                 |                 |              |              |                |              |                |           |

### Bandwidth Calculator  
In an era where data is being transferred in vast amounts and at high speeds, understanding bandwidth needs and capacity is an essential aspect of network management and application performance. A Bandwidth Calculator is a tool that helps you estimate the bandwidth needed to move a specific amount of data within a specific timeframe. In this article, we will delve into a Python code that creates a Bandwidth Calculator, designed to help you predict your bandwidth needs accurately.

The Bandwidth Calculator we are focusing on takes in four parameters: the throughput, the read percentage, the write percentage, and the initial data size. The Bandwidth Calculator is instantiated from the Bandwidth_Calculator class from the feeds.bandwidth_calculator module

```python
from feeds.bandwidth_calculator import Bandwidth_Calculator

# Create a BandwidthCalculator object

bc = Bandwidth_Calculator('1 Gbps', 50, 50, '1 TB') # Throughput , reads %, writes /%, Initial data size 

# Write the results to a CSV file
bc.write_to_csv('feeds.csv')

```


### Output 

### Output

| Media Throughput | Read/Write Ratio | Initial Data Size | Disk Space Required (Read) | Disk Space Required (Write) | Bandwidth Required (Read) | Bandwidth Required (Write) | Transfer Time                 |
| ---------------- | ---------------- | ----------------- | -------------------------- | --------------------------- | ------------------------- | -------------------------- | ----------------------------- |
| 1.0 Gbps         | 50:50            | 1.0 TB            | 512.0 GB                   | 512.0 GB                    | 500.0 Mbps                | 500.0 Mbps                 | 4 hours, 39 minutes, 37.22 seconds |




### About: 
Ray Bernard is a seasoned technologist specializing in cloud-based platforms, data science, and AI. He co-founded SuprFanz, a revolutionary cloud-based marketing company, and has held key roles at EMC, Dell, and Compaq/Dec. As  Systems Engineer, and Community Advocate, he demonstrated exceptional technical prowess and innovative thinking. Ray also taught Internet/Intranet Management & Design at Columbia University, further contributing to the field. With his vast experience and proactive problem-solving approach, he consistently drives digital transformation. 

Contact him: ray.bernard@outlook.com 
LinkedIn : https://www.linkedin.com/in/ray-bernard-960382/
Git : https://github.com/raymondbernard/
MIT License

Copyright (c) 2023 Raymond Bernard 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
